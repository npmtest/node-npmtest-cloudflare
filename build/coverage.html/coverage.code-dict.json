{"/home/travis/build/npmtest/node-npmtest-cloudflare/test.js":"/* istanbul instrument in package npmtest_cloudflare */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-cloudflare/lib.npmtest_cloudflare.js":"/* istanbul instrument in package npmtest_cloudflare */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_cloudflare = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_cloudflare = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-cloudflare/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-cloudflare && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_cloudflare */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_cloudflare\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_cloudflare.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_cloudflare.rollup.js'] =\n            local.assetsDict['/assets.npmtest_cloudflare.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_cloudflare.__dirname + '/lib.npmtest_cloudflare.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-cloudflare/node_modules/cloudflare/index.js":"'use strict';\nvar url = require('url');\nvar spdy = require('spdy');\nvar got = require('got');\nvar prototypal = require('es-class');\nvar pkg = require('./package.json');\n\nvar ips = require('./lib/ips');\nvar zones = require('./lib/zones');\nvar purge = require('./lib/purge');\nvar dns = require('./lib/dns');\n\n/**\n * Stub for paginated responses.\n *\n * Can be expanded later allow for getting the next page of results.\n */\nfunction PaginatedResponse(result, info) {\n  this.result = result;\n  this.page = info.page;\n  this.perPage = info.per_page;\n  this.totalPages = info.total_pages;\n  this.count = info.count;\n  this.total = info.total_count;\n}\n\nmodule.exports = prototypal({\n  static: {\n    RequestError: got.RequestError,\n    ReadError: got.ReadError,\n    ParseError: got.ParseError,\n    HTTPError: got.HTTPError,\n    MaxRedirectError: got.MaxRedirectError,\n    PaginatedResponse: PaginatedResponse\n  },\n  constructor: function (opts) {\n    opts = opts || {};\n\n    var spdyAgent = opts.h2 ? spdy.createAgent({\n      host: 'api.cloudflare.com',\n      port: 443,\n      protocol: ['h2']\n    }).once('error', function (err) {\n      /* istanbul ignore next */\n      this.emit('error', err);\n    }) : undefined;\n\n    this._got = function (endpoint, options) {\n      options = options || {};\n\n      var uri = url.resolve('https://api.cloudflare.com/client/v4/', endpoint);\n\n      return got(uri, {\n        json: true,\n        timeout: options.timeout || 1E4,\n        retries: options.retries,\n        method: options.method,\n        query: options.query,\n        body: options.body,\n        headers: {\n          'user-agent': 'cloudflare/' + pkg.version + ' node/' + process.versions.node,\n          'X-Auth-Key': opts.key,\n          'X-Auth-Email': opts.email,\n          'Content-Type': 'application/json'\n        },\n        agent: spdyAgent\n      });\n    };\n  },\n  _paginateResponse: function (result, info) {\n    return new PaginatedResponse(result, info);\n  },\n  readIPs: ips.read,\n  browseZones: zones.browse,\n  readZone: zones.read,\n  editZone: zones.edit,\n  addZone: zones.add,\n  checkZoneActivation: zones.activationCheck,\n  deleteZone: zones.delete,\n  deleteCache: purge.delete,\n  browseDNS: dns.browse,\n  readDNS: dns.read,\n  editDNS: dns.edit,\n  deleteDNS: dns.delete,\n  addDNS: dns.add\n});\n\nmodule.exports.IPRanges = ips.IPRanges;\nmodule.exports.Zone = zones.Zone;\nmodule.exports.DNSRecord = dns.DNSRecord;\n","/home/travis/build/npmtest/node-npmtest-cloudflare/node_modules/cloudflare/lib/ips.js":"'use strict';\nvar verymodel = require('verymodel');\n\nvar IPRanges = new verymodel.Model({\n  IPv4CIDRs: {type: 'array', static: true, alias: 'ipv4_cidrs'},\n  IPv6CIDRs: {type: 'array', static: true, alias: 'ipv6_cidrs'}\n});\n\nIPRanges.is = function (o) {\n  if (o && o.__verymeta && o.__verymeta.model) {\n    return o.__verymeta.model === this;\n  }\n\n  return false;\n};\n\nfunction read(options) {\n  return this._got('ips', options).then(function (response) {\n    return IPRanges.create(response.body.result);\n  });\n}\n\nmodule.exports.read = read;\nmodule.exports.IPRanges = IPRanges;\n","/home/travis/build/npmtest/node-npmtest-cloudflare/node_modules/cloudflare/lib/zones.js":"'use strict';\nvar join = require('url-join');\nvar verymodel = require('verymodel');\nvar pick = require('lodash/pick');\n\nvar Zone = new verymodel.Model({\n  id: {type: 'string', max: 32, static: true},\n  name: {type: 'string', max: 253, static: true},\n  devMode: {type: 'integer', alias: 'development_mode', static: true},\n  originalNameServers: {type: 'array', alias: 'original_name_servers', static: true},\n  originalRegistrar: {type: 'string', alias: 'original_registrar', static: true},\n  originalDNSHost: {type: 'array', max: 50, alias: 'original_dns_host', static: true},\n  createdOn: {type: 'date', alias: 'created_on', processIn: function (val) {\n    return new Date(val);\n  }, processOut: function (val) {\n    return val.toISOString();\n  }, default: function () {\n    return new Date();\n  }, static: true},\n  modifiedOn: {type: 'date', alias: 'modified_on', processIn: function (val) {\n    return new Date(val);\n  }, processOut: function (val) {\n    return val.toISOString();\n  }, default: function () {\n    return new Date();\n  }, static: true},\n  nameservers: {type: 'array', static: true, alias: 'name_servers'},\n  owner: {model: {\n    id: {type: 'string', max: 32},\n    email: {type: 'string', max: 90},\n    name: {type: 'string', max: 100},\n    ownerType: {type: 'enum', values: ['user', 'organization'], alias: 'owner_type'}\n  }, static: true},\n  permissions: {type: 'array', static: true},\n  plan: {},\n  status: {type: 'enum', values: ['active', 'pending', 'initializing', 'moved', 'deleted', 'deactivated'], static: true},\n  paused: {type: 'boolean'},\n  type: {type: 'enum', values: ['full', 'partial'], static: true},\n  host: {model: {\n    name: {type: 'string'},\n    website: {type: 'string'}\n  }, static: true},\n  vanityNameservers: {type: 'array', alias: 'vanity_name_servers'},\n  betas: {type: 'array', static: true},\n  deactivationReason: {type: 'enum', alias: 'deactivation_reason', values: ['abuse_violation', 'plan_limits_exceeded'], static: true},\n  meta: {static: true}\n});\n\nZone.is = function (o) {\n  if (o && o.__verymeta && o.__verymeta.model) {\n    return o.__verymeta.model === this;\n  }\n\n  return false;\n};\n\nfunction browse(query, options) {\n  options = options || {};\n  options.query = query;\n\n  return this._got('zones', options).then(function (response) {\n    var zones = response.body.result.map(function (z) {\n      return Zone.create(z);\n    });\n\n    return this._paginateResponse(zones, response.body.result_info);\n  }.bind(this));\n}\n\nfunction read(zid, options) {\n  var uri = join('zones', zid);\n\n  return this._got(uri, options).then(function (response) {\n    return Zone.create(response.body.result);\n  });\n}\n\nfunction edit(z, options) {\n  options = options || {};\n\n  var uri = join('zones', z.id);\n  var changes = z.getChanges();\n\n  var patched = Object.keys(changes).map(function (key) {\n    var change = changes[key];\n    change.key = Zone.alias[key];\n    return change;\n  }).filter(function (change) {\n    return change.changed;\n  }).map(function (change) {\n    var body = {};\n    body[change.key] = change.now;\n    return body;\n  });\n\n  if (patched.length === 0) {\n    return Promise.resolve(z.makeClone());\n  }\n\n  options.method = 'PATCH';\n\n  function sendPatched() {\n    var patch = patched.pop();\n\n    options.body = JSON.stringify(patch);\n\n    return this._got(uri, options).then(function (response) {\n      if (patched.length > 0) {\n        return sendPatched.call(this);\n      }\n\n      return Zone.create(response.body.result);\n    }.bind(this));\n  }\n\n  return sendPatched.call(this);\n}\n\nfunction add(z, jumpstart, options) {\n  options = options || {};\n\n  var body = pick(z.toJSON({useAliases: true}), ['name']);\n\n  if (jumpstart === false) {\n    body.jump_start = false; // eslint-disable-line camelcase\n  }\n\n  options.method = 'POST';\n  options.body = JSON.stringify(body);\n\n  return this._got('zones', options).then(function (response) {\n    return Zone.create(response.body.result);\n  });\n}\n\nfunction remove(z, options) {\n  var zid = Zone.is(z) ? z.id : z;\n  var uri = join('zones', zid);\n\n  options = options || {};\n  options.method = 'DELETE';\n\n  return this._got(uri, options).then(function (response) {\n    return response.body.result;\n  });\n}\n\nfunction activationCheck(z) {\n  var zid = Zone.is(z) ? z.id : z;\n  var uri = join('zones', zid, 'activation_check');\n  var options = {\n    method: 'PUT'\n  };\n\n  return this._got(uri, options).then(function (response) {\n    return response.body.result;\n  });\n}\n\nmodule.exports.browse = browse;\nmodule.exports.read = read;\nmodule.exports.edit = edit;\nmodule.exports.add = add;\nmodule.exports.delete = remove;\nmodule.exports.activationCheck = activationCheck;\nmodule.exports.Zone = Zone;\n","/home/travis/build/npmtest/node-npmtest-cloudflare/node_modules/cloudflare/lib/purge.js":"'use strict';\nvar join = require('url-join');\n\nfunction remove(z, query, options) {\n  var CF = this.constructor;\n\n  var zid = CF.Zone.is(z) ? z.id : z;\n  var uri = join('zones', zid, 'purge_cache');\n\n  options = options || {};\n  options.method = 'DELETE';\n  options.body = JSON.stringify(query);\n\n  return this._got(uri, options).then(function (response) {\n    return response.body.success;\n  });\n}\n\nmodule.exports.delete = remove;\n","/home/travis/build/npmtest/node-npmtest-cloudflare/node_modules/cloudflare/lib/dns.js":"'use strict';\nvar join = require('url-join');\nvar verymodel = require('verymodel');\nvar pick = require('lodash/pick');\n\nvar DNSRecord = new verymodel.Model({\n  id: {type: 'string', static: true, max: 32},\n  type: {type: 'enum', values: ['A', 'AAAA', 'CNAME', 'TXT', 'SRV', 'LOC', 'MX', 'NS', 'SPF']},\n  name: {type: 'string', max: 255},\n  content: {type: 'string'},\n  proxiable: {type: 'boolean', static: true},\n  proxied: {type: 'boolean'},\n  ttl: {type: 'integer'},\n  locked: {type: 'boolean', static: true},\n  zoneId: {type: 'string', static: true, max: 32, alias: 'zone_id'},\n  zoneName: {type: 'string', static: true, alias: 'zone_name'},\n  createdOn: {type: 'date', alias: 'created_on', processIn: function (val) {\n    return new Date(val);\n  }, processOut: function (val) {\n    return val.toISOString();\n  }, default: function () {\n    return new Date();\n  }, static: true},\n  modifiedOn: {type: 'date', alias: 'modified_on', processIn: function (val) {\n    return new Date(val);\n  }, processOut: function (val) {\n    return val.toISOString();\n  }, default: function () {\n    return new Date();\n  }, static: true},\n  priority: {\n    type: 'integer',\n    default: 0\n  },\n  data: {},\n  meta: {}\n});\n\nDNSRecord.is = function (o) {\n  if (o && o.__verymeta && o.__verymeta.model) {\n    return o.__verymeta.model === this;\n  }\n\n  return false;\n};\n\nfunction browse(z, query, options) {\n  options = options || {};\n  options.query = query;\n\n  var CF = this.constructor;\n  var zid = CF.Zone.is(z) ? z.id : z;\n  var uri = join('zones', zid, 'dns_records');\n\n  return this._got(uri, options).then(function (response) {\n    var records = response.body.result.map(function (rr) {\n      return DNSRecord.create(rr);\n    });\n\n    return this._paginateResponse(records, response.body.result_info);\n  }.bind(this));\n}\n\nfunction read(did, z, options) {\n  var CF = this.constructor;\n  var zid;\n\n  if (!zid && CF.Zone.is(z)) {\n    zid = z.id;\n  } else {\n    zid = z;\n  }\n\n  var uri = join('zones', zid, 'dns_records', did);\n\n  return this._got(uri, options).then(function (response) {\n    return DNSRecord.create(response.body.result);\n  });\n}\n\nfunction edit(rr, options) {\n  options = options || {};\n\n  var did = rr.id;\n  var zid = rr.zoneId;\n\n  var uri = join('zones', zid, 'dns_records', did);\n  options.method = 'PUT';\n  options.body = JSON.stringify(rr.toJSON({useAliases: true}));\n\n  return this._got(uri, options).then(function (response) {\n    return DNSRecord.create(response.body.result);\n  });\n}\n\nfunction add(rr, options) {\n  options = options || {};\n\n  var zid = rr.zoneId;\n\n  var uri = join('zones', zid, 'dns_records');\n\n  var fields = ['type', 'name', 'content', 'ttl', 'proxied'];\n  if (rr.type === 'MX') {\n    fields.push('priority');\n  } else if (rr.type === 'SRV') {\n    fields = ['type', 'data'];\n  }\n  var body = pick(rr.toJSON({useAliases: true}), fields);\n\n  options.method = 'POST';\n  options.body = JSON.stringify(body);\n\n  return this._got(uri, options).then(function (response) {\n    return DNSRecord.create(response.body.result);\n  });\n}\n\nfunction remove(rr, options) {\n  options = options || {};\n\n  var did = rr.id;\n  var zid = rr.zoneId;\n\n  var uri = join('zones', zid, 'dns_records', did);\n  options.method = 'DELETE';\n\n  return this._got(uri, options).then(function (response) {\n    return response.body.result;\n  });\n}\n\nmodule.exports.browse = browse;\nmodule.exports.read = read;\nmodule.exports.edit = edit;\nmodule.exports.add = add;\nmodule.exports.delete = remove;\nmodule.exports.DNSRecord = DNSRecord;\n"}